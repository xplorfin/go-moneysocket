package lightning

import (
	"context"
	"crypto/tls"
	"github.com/lightningnetwork/lnd/lnrpc"
	. "github.com/stretchr/testify/assert"
	"github.com/xplorfin/filet"
	mock "github.com/xplorfin/lndmock"
	terminusConfig "github.com/xplorfin/moneysocket-go/moneysocket/config"
	"gopkg.in/macaroon.v2"
	"testing"
)

type LndTestNode struct {
	mock.LndContainer
	// t is a pointer to the tessting object
	t *testing.T
	// mocker is a pointer to the lightning mocker (this should be initializeD)
	mocker *mock.LightningMocker
	// address is an address generated by the lnd node
	address string
	// pubkey of the node
	pubkey string
	// admin macaroon
	mac *macaroon.Macaroon
	// macFile: path to the macaroon file for this node
	macFile string
	// tls details
	tls *tls.Config
	// tlsFile path
	tlsFile string
}

// NewLndTestNode generates a new lnd test node
// note: the btcd container should be created and the mocker should be initialized before this step
func NewLndTestNode(t *testing.T, mocker *mock.LightningMocker, name string)  LndTestNode {
	var err error
	var tlsCert string
	node := LndTestNode{
		// LndContainer this will be replaced later in the function and is not usable
		LndContainer: mock.LndContainer{},
		t: t,
	}
	// start alice's lnd instance
	node.LndContainer, err = mocker.CreateLndContainer(name)
	Nil(t, err)


	// get address
	node.address, err = node.Address()
	Nil(t, err)

	node.pubkey, err = node.GetPubKey()
	Nil(t, err)

	// get macaroon
	node.mac, err = node.GetAdminMacaroon()
	Nil(t, err)


	rawMac, err := node.mac.MarshalBinary()
	Nil(t, err)
	node.macFile = filet.TmpBinFile(t, "", rawMac).Name()

	// get alices tls cert
	node.tls, tlsCert, err = node.GetTLSCert()
	Nil(t, err)
	node.tlsFile = filet.TmpFile(t, "", tlsCert).Name()
	return node
}

func (l LndTestNode) LndConfig() terminusConfig.LndConfig  {
	return terminusConfig.LndConfig{
		LndDir:       filet.TmpDir(l.t, ""),
		MacaroonPath: l.macFile,
		TLSCertPath:  l.tlsFile,
		Network:      "bitcoin",
		GrpcHost:     "localhost",
		GrpcPort:     l.PortMap.GetHostPort(10009),
	}
}


func TestLnd(t *testing.T)  {
		mocker := mock.NewLightningMocker()
		defer func() {
			Nil(t, mocker.Teardown())
		}()

		err := mocker.Initialize()
		Nil(t, err)

		// start btcd as a prereq to lnd
		btcdContainer, err := mocker.CreateBtcdContainer()
		Nil(t, err)


		alice := NewLndTestNode(t, &mocker, "alice")


		err = btcdContainer.MineToAddress(alice.address, 500)
		Nil(t, err)


		aliceConfig := alice.LndConfig()

		Nil(t, err)

		lnclient, err := aliceConfig.RPCClient(context.Background())
		Nil(t, err)

		req := lnrpc.GetInfoRequest{}
		_, err = lnclient.GetInfo(context.Background(), &req)
		Nil(t, err)
	}